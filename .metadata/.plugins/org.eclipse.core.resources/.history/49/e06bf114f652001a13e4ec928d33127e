package com.csye6225.spring2020.courseservice.Resources;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import com.csye6225.spring2020.courseservice.Model.Course;
import com.csye6225.spring2020.courseservice.Model.Professor;
import com.csye6225.spring2020.courseservice.Service.ProfessorService;

//import com.csye6225.fall2018.courseservice.datamodel.Professor;
//import com.csye6225.fall2018.courseservice.service.ProfessorsService;

// .. /webapi/myresource
@Path("professors")
public class ProfessorResource {

	ProfessorService profService = new ProfessorService();
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Professor> getAllProfessors() {
		return profService.getAllProfessors();
	}	
	
	@GET
	@Path("department/{department}")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Professor> getProfessorsByDeparment(
			@PathParam("department") String department) {
		
		if (department == null) {
			return profService.getAllProfessors();
		}
		return profService.getProfessorsByDepartment(department);
		
	}
	
	@GET
	@Path("joiningDate/{joiningDate}")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Professor> getProfessorsByJoingingDate(
			@PathParam("joiningDate") String joiningDate) {
		return profService.getProfessorsByJoiningDate(joiningDate);		
	}
	
	// ... webapi/professor/1 
	@GET
	@Path("/{professorId}")
	@Produces(MediaType.APPLICATION_JSON)
	public Professor getProfessor(@PathParam("professorId") String profId) {
		System.out.println("Professor Resource: Looking for: " + profId);
		return profService.getProfessor(profId);
	}
	
	@GET
	@Path("courses/{profId}")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Course> getCoursesByProfessors(
			@PathParam("profId") String profId) {
		return profService.getCoursesByProfessor(profId);		
	}
	
	@DELETE
	@Path("/{professorId}")
	@Produces(MediaType.APPLICATION_JSON)
	public Professor deleteProfessor(@PathParam("professorId") String profId) {
		return profService.deleteProfessor(profId);
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public void addProfessor(Professor prof) {
			prof.setProfessorId(prof.getFirstName()+prof.getLastName());
			profService.addProfessor(prof);
	}
		
	@PUT
	@Path("/{professorId}")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public Professor updateProfessor(@PathParam("professorId") String profId, 
			Professor prof) {
		if(Long.valueOf(profId) <= 0) {
			return null;
		}
		return profService.updateProfessorInformation(profId, prof);
	}

 }

package com.csye6225.spring2020.courseservice.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.NoSuchElementException;

import com.csye6225.spring2020.courseservice.DataBase.InMemoryDatabase;
import com.csye6225.spring2020.courseservice.Model.Course;
import com.csye6225.spring2020.courseservice.Model.Lecture;
import com.csye6225.spring2020.courseservice.Model.Professor;
import com.csye6225.spring2020.courseservice.Model.Student;

public class CourseService {

	static HashMap<String, Course> course_Map = InMemoryDatabase.getCourseDB();
	static HashMap<String, Student> student_Map = InMemoryDatabase.getStudentDB();
	static HashMap<String, Professor> prof_Map = InMemoryDatabase.getProfessorDB();
	static HashMap<String, Lecture> lecture_Map = InMemoryDatabase.getLectureDB();

	public CourseService() {
	}

	//get all courses
	public List<Course> getAllCourses() {
		ArrayList<Course> list = new ArrayList<>();
		for (Course course : course_Map.values()) {
			list.add(course);
		}
		return list ;
	}

	// Adding a course
	public void addCourse(String courseName, List<String> lectures, String board, String roster, List<String> enrolledStudents,
			String professorName, String studentTA, int credit) {
		boolean found = false;
		//Create a course Object
		for (Course course : course_Map.values()) {
			if(course.getCourseName() == courseName) {
				found = true;
			}
		}
		if (!found) {
			Course course = new Course( courseName, lectures, board, roster, enrolledStudents, professorName, studentTA, credit);
			course_Map.put(courseName, course);
		}else {
			System.out.println("Course already exits");
		}
	}


	// Getting One course
	public Course getCourse(String courseName) {
		if(course_Map.containsKey(courseName)) {
			Course course = course_Map.get(courseName);
			System.out.println("Item retrieved:");
			System.out.println(course.toString());
			return course;
		}else {
			throw new NoSuchElementException ("Course doesn't exits");
		}
	}

	// Deleting a course
	public Course deleteCourse(String courseName) {
		if(course_Map.containsKey(courseName)) {
			return course_Map.remove(courseName);
		}else {
			throw new NoSuchElementException ("Course doesn't exits");
		}
	}

	// Updating course Info
	public Course updateCourseInformattion(String courseName, Course course) {
		if(course_Map.containsKey(courseName)) {
			course.setCourseName(course.getCourseName());
			course_Map.put(courseName, course);
			return course;
		}else {
			throw new NoSuchElementException ("Course doesn't exits");
		}
	}

	// Get studentTA by a course 
	public Student getStudentTAByCourse(String courseName) {	
		for (Course course : course_Map.values()) {
			if (course.getCourseName().equalsIgnoreCase(courseName)) {
				String studentName = course.getStudentTA();
				return student_Map.get(studentName);
			}
		}
		return null;
	}

	// Get professor by a course 
	public Professor getProfessorByCourse(String courseName) {	
		for (Course course : course_Map.values()) {
			if (course.getCourseName().equalsIgnoreCase(courseName)) {
				String professor = course.getProfessorName();
				return prof_Map.get(professor);
			}
		}
		return null;
	}

	// Get enrolled students by a course
	public List<String> getEnrolledStudentsByCourse(String courseName) {	
		//Getting the courses list
		for (Course course : course_Map.values()) {
			if (course.getCourseName().equalsIgnoreCase(courseName)) {
				return course.getEnrolledStudents();
			}
		}
		return null;
	}

	// Get lectures by a course
	public List<Lecture> getLecturesByCourse(String courseName) {	
		if(course_Map.containsKey(courseName)){
			for (Course course : course_Map.values()) {
				if (course.getCourseName().equalsIgnoreCase(courseName)) {
					List<String> lectures = course.getLectures();
					List<Lecture> lecture = new ArrayList<>();
					for(int i = 0; i < lectures.size(); i++) {
						lecture.add(lecture_Map.get(lectures.get(i)));
					}
					return lecture;
				}
			}
		}else {
			throw new NoSuchElementException ("Professor doesn't exits");
		}

		return null;
	}


	public List<Course> getCoursesByProfessor(String profId) {
		if(prof_Map.containsKey(profId)){
			for (Professor prof : prof_Map.values()) {
				if (prof.getProfessorId().equalsIgnoreCase(profId)) {
					List<String> courses = prof.getCourses();
					List<Course> courseDetails = new ArrayList<>();
					for(int i = 0; i < courses.size(); i++) {
						courseDetails.add(course_Map.get(courses.get(i)));
					}
					return courseDetails;
				}
			}
		}else {
			throw new NoSuchElementException ("Professor doesn't exits");
		}
		return null;
	}

	// Get credits by a course
	public int getCreditsByCourse(String courseName) {	
		//Getting the courses list
		for (Course course : course_Map.values()) {
			if (course.getCourseName().equalsIgnoreCase(courseName)) {
				return course.getCredits();
			}
		}
		throw new NoSuchElementException ("Course doesn't exits");
	}

}


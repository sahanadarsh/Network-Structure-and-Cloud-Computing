package com.csye6225.spring2020.courseservice.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.csye6225.spring2020.courseservice.DataBase.StudentDB;
import com.csye6225.spring2020.courseservice.Model.Student;

public class StudentService {
		
		static HashMap<Long, Student> student_Map = StudentDB.getstudentDB();
		
		public StudentService() {
		}
		
		public List<Student> getAllStudents() {
			ArrayList<Student> list = new ArrayList<>();
			for (Student student : student_Map.values()) {
				list.add(student);
			}
			return list ;
		}

		// Adding a professor
		public void addProfessor(String firstName, String lastName, String department, Date joiningDate) {
			// Next Id 
			long nextAvailableId = prof_Map.size() + 1;
			boolean found = false;
			//Create a Professor Object
			for (Professor prof : prof_Map.values()) {
				if((prof.getProfessorId()).equalsIgnoreCase(firstName+lastName)) {
					found = true;
				}
			}
			if (!found) {
				Professor profh = new Professor(firstName+lastName, firstName , lastName, 
						department, joiningDate);
				prof_Map.put(nextAvailableId, profh);
			}else {
				System.out.println("Professor already exits");
			}
		}
		
		
		// Getting One Professor
		public Professor getProfessor(String profId) {
			
			 //Simple HashKey Load
			 Professor prof2 = prof_Map.get(Long.parseLong(profId));
		     System.out.println("Item retrieved:");
		     System.out.println(prof2.toString());
			
			return prof2;
		}
		
		// Deleting a professor
		public Professor deleteProfessor(Long profId) {
			Professor deletedProfDetails = prof_Map.get(profId);
			prof_Map.remove(profId);
			return deletedProfDetails;
		}
		
		// Updating Professor Info
		public Professor updateProfessorInformation(String profId, Professor prof) {	
			Professor oldProfObject = prof_Map.get(Long.parseLong(profId));
			oldProfObject.setFirstName(prof.getFirstName());
			oldProfObject.setLastName(prof.getLastName());
			oldProfObject.setDepartment(prof.getDepartment());
			//oldProfObject.setJoiningDate(prof.getJoiningDate());
			return oldProfObject;
		}
		
		// Get professors in a department 
		public List<Professor> getProfessorsByDepartment(String department) {	
			//Getting the list
			ArrayList<Professor> list = new ArrayList<>();
			for (Professor prof : prof_Map.values()) {
				if (prof.getDepartment().equalsIgnoreCase(department)) {
					list.add(prof);
				}
			}
			return list ;
		}
		
		// Get professors for a year with a size limit
		
	}


}

package com.csye6225.spring2020.courseservice.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.csye6225.spring2020.courseservice.DataBase.InMemoryDatabase;
import com.csye6225.spring2020.courseservice.Model.Course;
import com.csye6225.spring2020.courseservice.Model.Professor;
import com.csye6225.spring2020.courseservice.Model.Program;
import com.csye6225.spring2020.courseservice.Model.Student;

public class ProgramService {

	static HashMap<String, Program> program_Map = InMemoryDatabase.getProgramDB();

	public ProgramService() {
	}

	public List<Program> getAllPrograms() {
		ArrayList<Program> list = new ArrayList<>();
		for (Program program : program_Map.values()) {
			list.add(program);
		}
		return list ;
	}

	// Adding a program
	public void addProgram(String programName, List<Course> courses, List<Professor> professors, int progDuration, int graduationCredits) {
		boolean found = false;
		//Create a student Object
		for (Program prog : program_Map.values()) {
			if(prog.getProgramName() == programName) {
				found = true;
			}
		}
		if (!found) {
			Program prog = new Program( programName, courses, professors, progDuration, graduationCredits);
			program_Map.put(programName, prog);
		}else {
			System.out.println("Program already exits");
		}
	}


	// Getting One program
	public Program getProgram(String programName) {

		//Simple HashKey Load
		Program program = program_Map.get(programName);
		System.out.println("Item retrieved:");
		System.out.println(program.toString());

		return program;
	}

	// Deleting a program
	public Program deleteProgram(String programName) {
		return program_Map.get(programName);
	}

	// Updating student Info
	public Program updateProgramInformattion(String programName, Program program) {
		program.setProgramName(program.getProgramName());
		program_Map.put(programName, program);
		return program;
	}

	// Get courses in a program 
	public List<Course> getCoursesByProgram(String programName) {	
		//Getting the list
		for (Program prog : program_Map.values()) {
			if (prog.getProgramName().equalsIgnoreCase(programName)) {
				return prog.getCourses();
			}
		}
	}
	
	// Get professors in a program 
	public List<Professor> getProfessorsByProgram(String program) {	
		//Getting the list
		ArrayList<Student> list = new ArrayList<>();
		for (Student prof : student_Map.values()) {
			if (prof.getProgram().equalsIgnoreCase(program)) {
				list.add(prof);
			}
		}
		return list ;
	}

}





package com.csye6225.spring2020.courseservice.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.NoSuchElementException;

import com.csye6225.spring2020.courseservice.datamodel.InMemoryDatabase;
import com.csye6225.spring2020.courseservice.datamodel.Lecture;

public class LectureService {

	static HashMap<String, Lecture> lecture_Map = InMemoryDatabase.getLectureDB();

	public LectureService() {
	}

	public List<Lecture> getAllLectures() {
		ArrayList<Lecture> list = new ArrayList<>();
		for (Lecture lecture : lecture_Map.values()) {
			list.add(lecture);
		}
		return list ;
	}

	// Adding a lecture
	public void addLecture(Lecture lecture) {
		boolean found = false;
		for (Lecture lect : lecture_Map.values()) {
			if((lect.getLectureName()).equalsIgnoreCase(lecture.getLectureName())){
				found = true;
			}
		}
		if (!found) {
			Lecture lect = new Lecture(lecture.getLectureName(), lecture.getNotes(), lecture.getAssociatedMaterials(), lecture.getNotifications(), lecture.getDuration());
			lecture_Map.put(lecture.getLectureName(), lect);
		}else {
			System.out.println("Lecture already exits");
		}
	}

	// Getting One lecture
	public static Lecture getLecture(String lectureName) {
		if(lecture_Map.containsKey(lectureName)) {
			Lecture lecture = lecture_Map.get(lectureName);
			System.out.println("Item retrieved:");
			System.out.println(lecture.toString());
			return lecture;
		}else {
			throw new NoSuchElementException ("Lecture doesn't exits");
		}
	}

	// Deleting a lecture
	public Lecture deleteLecture(String lectureName) {
		if(lecture_Map.containsKey(lectureName)) {
			return lecture_Map.remove(lectureName);
		}else {
			throw new NoSuchElementException ("Lecture doesn't exits");
		}
	}

	// Updating lecture Info
	public Lecture updateLectureInformattion(String lectureName, Lecture lecture) {
		if(lecture_Map.containsKey(lectureName)) {
			lecture.setLectureName(lecture.getLectureName());
			lecture_Map.put(lectureName, lecture);
			return lecture;
		}else {
			throw new NoSuchElementException ("Lecture doesn't exits");
		}
	}

	// Get notes by a lecture 
	public List<String> getNotesByLecture(String lectureName) {	
		for (Lecture lecture : lecture_Map.values()) {
			if (lecture.getLectureName().equalsIgnoreCase(lectureName)) {
				return lecture.getNotes();
			}
		}
		throw new NoSuchElementException ("Lecture doesn't exits");
	}

	// Get associated material by a lecture
	public List<String> getAssociatedMaterialsByLecture(String lectureName) {	
		for (Lecture lecture : lecture_Map.values()) {
			if (lecture.getLectureName().equalsIgnoreCase(lectureName)) {
				return lecture.getAssociatedMaterials();
			}
		}
		throw new NoSuchElementException ("Lecture doesn't exits");
	}

	// Get duration by a lecture
	public String getDurationByLecture(String lectureName) {	
		for (Lecture lecture : lecture_Map.values()) {
			if (lecture.getLectureName().equalsIgnoreCase(lectureName)) {
				return lecture.getDuration();
			}
		}
		throw new NoSuchElementException ("Lecture doesn't exits");
	}


	// Get notifications by a lecture
	public List<String> getNotificationsByLecture(String lectureName) {	
		for (Lecture lecture : lecture_Map.values()) {
			if (lecture.getLectureName().equalsIgnoreCase(lectureName)) {
				return lecture.getNotifications();
			}
		}
		throw new NoSuchElementException ("Lecture doesn't exits");
	}
	
	public boolean isLectureExit(List<String> lectures){
		for(int i = 0; i < lectures.size(); i++) {
			if(!lecture_Map.containsKey(lectures.get(i))){
				return false;
			}
		}
		return true;
	}

}


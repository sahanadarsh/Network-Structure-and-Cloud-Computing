package com.csye6225.spring2020.courseservice.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.csye6225.spring2020.courseservice.DataBase.InMemoryDatabase;
import com.csye6225.spring2020.courseservice.Model.Course;

public class CourseService {

	static HashMap<String, Course> course_Map = InMemoryDatabase.getCourseDB();

	public CourseService() {
	}

	public List<Course> getAllCourses() {
		ArrayList<Course> list = new ArrayList<>();
		for (Course course : course_Map.values()) {
			list.add(course);
		}
		return list ;
	}

	// Adding a course
	public void addCourse(String courseName, List<String> lectures, String board, String roster, List<String> enrolledStudents,
			String professorName, String studentTA, int credit) {
		boolean found = false;
		//Create a course Object
		for (Course course : course_Map.values()) {
			if(course.getCourseName() == courseName) {
				found = true;
			}
		}
		if (!found) {
			Course course = new Course( courseName, lectures, board, roster, enrolledStudents, professorName, studentTA, credit);
			course_Map.put(courseName, course);
		}else {
			System.out.println("Course already exits");
		}
	}


	// Getting One course
	public Course getCourse(String courseName) {

		//Simple HashKey Load
		Course course = course_Map.get(courseName);
		System.out.println("Item retrieved:");
		System.out.println(course.toString());

		return course;
	}

	// Deleting a course
	public Course deleteCourse(String courseName) {
		return course_Map.remove(courseName);
	}

	// Updating course Info
	public Course updateCourseInformattion(String courseName, Course course) {
		course.setCourseName(course.getCourseName());
		course_Map.put(courseName, course);
		return course;
	}

	// Get studentTA by a course 
	public String getStudentTAByCourse(String courseName) {	
		//Getting the courses list
		for (Course course : course_Map.values()) {
			if (course.getCourseName().equalsIgnoreCase(courseName)) {
				return course.getStudentTA();
			}
		}
		return null;
	}
	
	// Get professor by a course 
	public String getProfessorByCourse(String courseName) {	
		//Getting the courses list
		for (Course course : course_Map.values()) {
			if (course.getCourseName().equalsIgnoreCase(courseName)) {
				return course.getProfessorName();
			}
		}
		return null;
	}
	
	// Get enrolled students by a course
	// Get credits by a course
	// Get lectures by a course
	public List<String> getLecturesByCourse(String courseName) {	
		//Getting the lectures list
		for (Course course : course_Map.values()) {
			if (course.getCourseName().equalsIgnoreCase(courseName)) {
				return course.getLectures();
			}
		}
		return null;
	}

}

